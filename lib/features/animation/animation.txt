🎨 Flutter Animations – Complete Guide

Flutter provides two types of animations:

  1. Implicit Animations → Shortcuts for simple animations (less control).

  2. Explicit Animations → Full control with AnimationController.

  1. 📦 Implicit Animations

  These widgets animate changes automatically when a property changes.

  ✅ Common Widgets:

  1. AnimatedContainer

  2. AnimatedOpacity

  3. AnimatedAlign

  4. AnimatedPositioned

  5. AnimatedPadding

  6.  AnimatedCrossFade

  7. TweenAnimationBuilder


  Example 1: AnimatedContainer
  import 'package:flutter/material.dart';

  class ImplicitAnimationExample extends StatefulWidget {
    @override
    _ImplicitAnimationExampleState createState() => _ImplicitAnimationExampleState();
  }

  class _ImplicitAnimationExampleState extends State<ImplicitAnimationExample> {
    bool _big = false;

    @override
    Widget build(BuildContext context) {
      return Scaffold(
        appBar: AppBar(title: Text("Implicit Animation")),
        body: Center(
          child: GestureDetector(
            onTap: () {
              setState(() => _big = !_big);
            },
            child: AnimatedContainer(
              duration: Duration(seconds: 1),
              curve: Curves.easeInOut,
              width: _big ? 200 : 100,
              height: _big ? 200 : 100,
              color: _big ? Colors.blue : Colors.red,
              child: Center(child: Text("Tap Me", style: TextStyle(color: Colors.white))),
            ),
          ),
        ),
      );
    }
  }
note:-Tapping toggles size & color smoothly without AnimationController

Example 2: TweenAnimationBuilder
TweenAnimationBuilder<double>(
  tween: Tween(begin: 0.0, end: 1.0),
  duration: Duration(seconds: 2),
  builder: (context, value, child) {
    return Opacity(
      opacity: value,
      child: Transform.scale(
        scale: value,
        child: child,
      ),
    );
  },
  child: Icon(Icons.star, size: 100, color: Colors.orange),
)
note:- Combines multiple effects with tweens.

2. ⚡ Explicit Animations

Here you use an AnimationController to manually control the animation.

Key Classes:

1. AnimationController

2. Animation<T>

3. Tween<T>

4. CurvedAnimation

5. AnimatedBuilder

6. AnimatedWidget


Example 1: Scale Animation with AnimationController
import 'package:flutter/material.dart';

class ExplicitAnimationExample extends StatefulWidget {
  @override
  _ExplicitAnimationExampleState createState() => _ExplicitAnimationExampleState();
}

class _ExplicitAnimationExampleState extends State<ExplicitAnimationExample>
    with SingleTickerProviderStateMixin {
  late AnimationController _controller;
  late Animation<double> _scaleAnimation;

  @override
  void initState() {
    super.initState();

    _controller = AnimationController(
      vsync: this,
      duration: Duration(seconds: 2),
    );

    _scaleAnimation = Tween<double>(begin: 0.5, end: 1.5)
        .animate(CurvedAnimation(parent: _controller, curve: Curves.elasticOut));

    _controller.repeat(reverse: true);
  }

  @override
  void dispose() {
    _controller.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text("Explicit Animation")),
      body: Center(
        child: ScaleTransition(
          scale: _scaleAnimation,
          child: Icon(Icons.favorite, size: 100, color: Colors.pink),
        ),
      ),
    );
  }
}
note:-Here, we use AnimationController for full control (start, stop, reverse, repeat).

Example 2: AnimatedBuilder (Efficient Way)
AnimatedBuilder(
  animation: _controller,
  builder: (context, child) {
    return Transform.rotate(
      angle: _controller.value * 6.28, // full rotation
      child: child,
    );
  },
  child: Icon(Icons.refresh, size: 80, color: Colors.green),
)
note:-Rebuilds only the rotating part, keeps child constant.


3. 🎭 Advanced Explicit Animations
   🔹 Staggered Animations
   Different animations running one after another.
final opacity = Tween<double>(begin: 0, end: 1).animate(
  CurvedAnimation(parent: _controller, curve: Interval(0.0, 0.5, curve: Curves.easeIn)),
);

final move = Tween<Offset>(begin: Offset(0, 50), end: Offset.zero).animate(
  CurvedAnimation(parent: _controller, curve: Interval(0.5, 1.0, curve: Curves.easeOut)),
);


===================note==========================================
⚙️ Best Practices
✅ Use implicit animations for simple UI changes.
✅ Use explicit animations when you need full control.
✅ Always dispose() controllers.
✅ Prefer AnimatedBuilder or AnimatedWidget for performance.
✅ Use TickerProviderStateMixin (or SingleTickerProviderStateMixin).

 ================== animated widgets to explore ===================
 1. FadeTransition

 2. ScaleTransition

 3. RotationTransition

 4. SlideTransition

 5. AnimatedList

 6. AnimatedSwitcher

 1. FadeTransition Example
  import 'package:flutter/material.dart';

  class FadeTransitionExample extends StatefulWidget {
    @override
    _FadeTransitionExampleState createState() => _FadeTransitionExampleState();
  }

  class _FadeTransitionExampleState extends State<FadeTransitionExample>
      with SingleTickerProviderStateMixin {
    late AnimationController _controller;
    late Animation<double> _animation;

    @override
    void initState() {
      super.initState();
      _controller =
          AnimationController(vsync: this, duration: const Duration(seconds: 2))
            ..repeat(reverse: true);
      _animation = CurvedAnimation(parent: _controller, curve: Curves.easeIn);
    }

    @override
    Widget build(BuildContext context) {
      return Scaffold(
        appBar: AppBar(title: Text("FadeTransition")),
        body: Center(
          child: FadeTransition(
            opacity: _animation,
            child: Container(width: 100, height: 100, color: Colors.blue),
          ),
        ),
      );
    }
  }

2. ScaleTransition Example
class ScaleTransitionExample extends StatefulWidget {
  @override
  _ScaleTransitionExampleState createState() => _ScaleTransitionExampleState();
}

class _ScaleTransitionExampleState extends State<ScaleTransitionExample>
    with SingleTickerProviderStateMixin {
  late AnimationController _controller;

  @override
  void initState() {
    super.initState();
    _controller =
        AnimationController(vsync: this, duration: const Duration(seconds: 2))
          ..repeat(reverse: true);
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text("ScaleTransition")),
      body: Center(
        child: ScaleTransition(
          scale: _controller,
          child: Container(width: 100, height: 100, color: Colors.green),
        ),
      ),
    );
  }
}
3. RotationTransition Example
class RotationTransitionExample extends StatefulWidget {
  @override
  _RotationTransitionExampleState createState() =>
      _RotationTransitionExampleState();
}

class _RotationTransitionExampleState extends State<RotationTransitionExample>
    with SingleTickerProviderStateMixin {
  late AnimationController _controller;

  @override
  void initState() {
    super.initState();
    _controller =
        AnimationController(vsync: this, duration: const Duration(seconds: 2))
          ..repeat();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text("RotationTransition")),
      body: Center(
        child: RotationTransition(
          turns: _controller,
          child: Container(width: 100, height: 100, color: Colors.red),
        ),
      ),
    );
  }
}
4. SlideTransition Example
class SlideTransitionExample extends StatefulWidget {
  @override
  _SlideTransitionExampleState createState() => _SlideTransitionExampleState();
}

class _SlideTransitionExampleState extends State<SlideTransitionExample>
    with SingleTickerProviderStateMixin {
  late AnimationController _controller;
  late Animation<Offset> _animation;

  @override
  void initState() {
    super.initState();
    _controller =
        AnimationController(vsync: this, duration: const Duration(seconds: 2))
          ..repeat(reverse: true);
    _animation =
        Tween<Offset>(begin: Offset(-1, 0), end: Offset(1, 0)).animate(_controller);
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text("SlideTransition")),
      body: Center(
        child: SlideTransition(
          position: _animation,
          child: Container(width: 100, height: 100, color: Colors.purple),
        ),
      ),
    );
  }
}
5. AnimatedList Example
class AnimatedListExample extends StatefulWidget {
  @override
  _AnimatedListExampleState createState() => _AnimatedListExampleState();
}

class _AnimatedListExampleState extends State<AnimatedListExample> {
  final GlobalKey<AnimatedListState> _listKey = GlobalKey();
  final List<int> _items = [];

  void _addItem() {
    final index = _items.length;
    _items.add(index);
    _listKey.currentState?.insertItem(index);
  }

  void _removeItem(int index) {
    final removedItem = _items.removeAt(index);
    _listKey.currentState?.removeItem(
      index,
      (context, animation) => SizeTransition(
        sizeFactor: animation,
        child: ListTile(title: Text("Item $removedItem")),
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text("AnimatedList")),
      body: AnimatedList(
        key: _listKey,
        initialItemCount: _items.length,
        itemBuilder: (context, index, animation) {
          return SizeTransition(
            sizeFactor: animation,
            child: ListTile(
              title: Text("Item ${_items[index]}"),
              trailing: IconButton(
                icon: Icon(Icons.delete),
                onPressed: () => _removeItem(index),
              ),
            ),
          );
        },
      ),
      floatingActionButton: FloatingActionButton(
        onPressed: _addItem,
        child: Icon(Icons.add),
      ),
    );
  }
}
6. AnimatedSwitcher Example
class AnimatedSwitcherExample extends StatefulWidget {
  @override
  _AnimatedSwitcherExampleState createState() =>
      _AnimatedSwitcherExampleState();
}

class _AnimatedSwitcherExampleState extends State<AnimatedSwitcherExample> {
  bool _first = true;

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text("AnimatedSwitcher")),
      body: Center(
        child: AnimatedSwitcher(
          duration: Duration(seconds: 1),
          transitionBuilder: (child, animation) {
            return ScaleTransition(scale: animation, child: child);
          },
          child: _first
              ? Container(
                  key: ValueKey(1),
                  width: 100,
                  height: 100,
                  color: Colors.orange,
                )
              : Container(
                  key: ValueKey(2),
                  width: 150,
                  height: 150,
                  color: Colors.blue,
                ),
        ),
      ),
      floatingActionButton: FloatingActionButton(
        onPressed: () {
          setState(() {
            _first = !_first;
          });
        },
        child: Icon(Icons.swap_horiz),
      ),
    );
  }
}
